Stack:-
================================================================================================

package com.stackimpl;

public class Stack {
	int[] arr;
	int topOfStack;
	Stack(int size){
		this.arr=new int[size];
		this.topOfStack=-1;
	}
	
	public boolean isEmpty() {
		if(topOfStack==-1)
			return true;
		else
			return false;
	}
	public boolean isFull() {
		if(topOfStack==arr.length-1)
			return true;
		else
			return false;
	}
	public void push(int value) {
		if(isFull()) {
			System.out.println("The stack is full!");
		}
		else {
			arr[topOfStack+1]=value;
			topOfStack++;
			System.out.println("The value is inserted successfully");
		}
	}
	public int pop() {
		if(isEmpty()) {
			System.out.println("The stack is empty!");
			return -1;
		}
		
	else {
		int del=arr[topOfStack];
		topOfStack--;
		System.out.println("The element is removed successfully");
		return del;	
	}
	}
	
	public void deleteStack() {
		arr=null;
		System.out.println("The stack is successfully deleted!");
	}
	
	public int peek() {
		if(isEmpty()) {
			System.out.println("The stack is empty");
			return -1;
		}
		else
			return arr[topOfStack];
	}

}



package com.stackimpl;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stack s=new Stack(4);
		System.out.println(s.isEmpty());
		System.out.println(s.isFull());
		s.push(3);
		s.push(5);
		s.push(6);
		s.push(9);
		System.out.println(s.topOfStack);
//		s.push(10);
		s.pop();
		System.out.println(s.topOfStack);
		System.out.println(s.peek());

	}

}


OutPut:-

true
false
The value is inserted successfully
The value is inserted successfully
The value is inserted successfully
The value is inserted successfully
3
The element is removed successfully
2
6




Stack using LinkedList:-
===================================================================

package com.stackimpl;

public class Node {
	int data;
	Node next;
	
	Node(int data){
		this.data=data;
		this.next=null;
	}

}




package com.stackimpl;

public class LinkedList {
	Node head,tail;
	
	public void insertion(int value) {
		Node new_node=new Node(value);
		if(head==null) {
			head=tail=new_node;
			return;
		}
		new_node.next=head;
		head=new_node;
	}
	public void deletion() {
		if(head==null) {
			System.out.println("The linked list doesn't exist");
			return;
		}else if(head==tail) {
			head=tail=null;
			return;
		}

		head=head.next;
	}
	

}




package com.stackimpl;

public class StackusingLL {
	
	LinkedList ll;
	
	public StackusingLL() {
		this.ll=new LinkedList();
	}
	public void push(int value) {
		ll.insertion(value);
		System.out.println("The value inserted successfully");
	}
	public int pop() {
		if(isEmpty()) {
			System.out.println("the stack is empty!");
			return -1;
		}
		else {
			int del= ll.head.data;
		    ll.deletion();
		    return del;
		}
	}
	public boolean isEmpty() {
		if(ll.head== null)
			return true;
		return false;
	}
	
	public void deleteStack() {
		ll.head=null;
	}
	public int peek() {
		if(isEmpty()) {
			System.out.println("The stack is empty!");
			return -1;
		}
		return ll.head.data;
	}
	
	

}





package com.stackimpl;

public class Main {

	public static void main(String[] args) {
		StackusingLL s=new StackusingLL();
		int result=s.peek();
		System.out.println(result);
		s.push(1);
		s.push(2);
		s.push(3);
		int result1=s.peek();
		System.out.println("peek: "+result1);
		System.out.println(s.pop());
		System.out.println(s.pop());
		System.out.println(s.pop());
		System.out.println(s.pop());
		

	}

}



Output:-
----------
The stack is empty!
-1
The value inserted successfully
The value inserted successfully
The value inserted successfully
peek: 3
3
2
1
the stack is empty!
-1





Stack Programs:-
==============================================================================

Reverse a String using Stack:-
----------------------------------
package com.stackimpl;

public class Main {
	
	public  String reverse(String s) {
		StackusingLL k=new StackusingLL();
		String revStr="";
		for(int i=0;i<s.length();i++) {
			Character c=s.charAt(i);
			k.push(c);
		}
		while(!k.isEmpty()) {
			revStr+=(char)k.pop();
		}		
		return revStr;
	}

	public static void main(String[] args) {

		Main m =new Main();
		String s="Satheesh";
		String res=m.reverse(s);
		System.out.println(s);
		System.out.println(res);
	}

}


Output:-

Satheesh
hseehtaS


============================================================================
Delimiter Matching Using Stack
------------------------------------

package com.stackimpl;

public class Main {
	
	public boolean checkCorrectBracket(String s) {
		StackusingLL k=new StackusingLL();
		for(int i=0;i<s.length();i++) {
			char c=s.charAt(i);
			switch(c) {
			case '{':
			case '[':
			case '(':
				k.push(c);
				break;
			case '}':
			case ']':
			case ')':

				
				if(!k.isEmpty()) {
					char ch=(char) k.pop();
					if(ch=='{'&& c!='}' || ch=='['&& c!=']' || ch=='('&& c!=')') {
						System.out.println("Not valid brackets 1" + c);
						return false;	
					}
					}
				 else {
						System.out.println("Not valid bracket 2");
						return false;
					}
			  
				break;
			
			}
		}
		if(!k.isEmpty()) {
			System.out.println("Not valid brackets 3");
			return false;
		}
		return true;
	}

	public static void main(String[] args) {

		Main m =new Main();
		String s="(a+b)+c";
		System.out.println(s);
		boolean res=m.checkCorrectBracket(s);
		System.out.println(res);
		String s1="a+b)+c";
		System.out.println(s1);
		boolean res1=m.checkCorrectBracket(s1);
		System.out.println(res1);
		String s2="(a+b+c";
		System.out.println(s2);
		boolean res2=m.checkCorrectBracket(s2);
		System.out.println(res2);
	}

}


Output:-
-------------

(a+b)+c
true
a+b)+c
Not valid bracket 2
false
(a+b+c
Not valid brackets 3
false



===========================================================================

Delete middle element of a stack:-
---------------------------------------------

Given a stack with push(), pop(), and empty() operations, The task is to delete the 
middle element of it without using any additional data structure.

Input  : Stack[] = [1, 2, 3, 4, 5]
Output : Stack[] = [1, 2, 4, 5]

Input  : Stack[] = [1, 2, 3, 4, 5, 6]
Output : Stack[] = [1, 2, 4, 5, 6]


The Approach:

       we have the stack we just put all the element of stack into a vector then traverse
 over the vector and put the print the element/push into stack ignoring the mid element for
 even (n/2) and for odd (ceil(n/2)).


import java.util.Stack;
import java.util.Vector;
 
public class Main {
 
    public static void main(String[] args) {
        Stack<Character> st = new Stack<Character>();
        st.push('1');
        st.push('2');
        st.push('3');
        st.push('4');
        st.push('5');
        st.push('6');
        st.push('7');
        Vector<Character> v = new Vector<Character>();
        while (!st.empty()) {
            v.add(st.pop());
        }
        int n = v.size();
        if (n % 2 == 0) {
            int target = (n / 2);
            for (int i = 0; i < n; i++) {
                if (i == target) continue;
                st.push(v.get(i));
            }
        } else {
            int target = (int) Math.ceil(n / 2);
            for (int i = 0; i < n; i++) {
                if (i == target) continue;
                st.push(v.get(i));
            }
        }
        System.out.print("Printing stack after deletion of middle: ");
        while (!st.empty()) {
            char p = st.pop();
            System.out.print(p + " ");
        }
    }
}



Output:-

Printing stack after deletion of middle: 1 2 3 5 6 7 


Time Complexity: O(N), For the Traversing.
Auxiliary Space: O(N), For the Vector.

-----------------------------------------------------------------------

Pop the elements above the middle element of the given stack and use a temp stack
 to store these popped elements. Then pop the middle element and push the elements 
of the temp stack in the given stack.


import java.util.Stack;
 
@SuppressWarnings("unchecked")
class Rextester
{
   
    // Deletes middle of stack of size n. Curr is current
    // item number
    static void deleteMid(Stack<Character> st)
    {
        int n = st.size();
        Stack<Character> tempSt = new Stack();
        int count = 0;
        // put first n/2 element of st in tempSt
        while (count < n / 2) {
            char c = st.peek();
            st.pop();
            tempSt.push(c);
            count++;
        }
        // delete middle element
        st.pop();
        // put all (n/2) element of tempSt in st
        while (!tempSt.empty()) {
            st.push(tempSt.peek());
            tempSt.pop();
        }
    }
 
    // Driver function to test above functions
    public static void main(String args[])
    {
        Stack<Character> st = new Stack();
 
        // push elements into the stack
        st.push('1');
        st.push('2');
        st.push('3');
        st.push('4');
        st.push('5');
        st.push('6');
        st.push('7');
 
        deleteMid(st);
 
        // Printing stack after deletion of middle.
        while (!st.empty()) {
            char p = st.peek();
            st.pop();
            System.out.print(p + " ");
        }
    }
}
 

Output:-
7 6 5 3 2 1 

Time Complexity: O(N), For the while loop
Auxiliary Space: O(N), for temp stack space.
===========================================================================

Reverse a number using stack:-
-----------------------------------------------------------------------------

Given a number , write a program to reverse this number using stack.

Examples: 

Input : 365
Output : 563

Input : 6899
Output : 9986


import java.util.Stack;

public class Main
{
    public static void reverseNumber(int number){

        Stack<Integer> s=new Stack<>();
        int rem,revNum=0,i=1;

        while(number>0){
            rem=number%10;
            s.push(rem);
            number=number/10;
        }

        while(!s.isEmpty()){
            revNum=revNum+(s.pop()*i);
            i=i*10;
           
        }
        System.out.println(revNum);
    }
    
	public static void main(String[] args) {
	    
	    int number =123;
	    Main.reverseNumber(number);
	    
		
	}
}




=====================================================================================

Implement two Stacks in an Array:-

Create a data structure twoStacks that represent two stacks. Implementation of twoStacks 
should use only one array, i.e., both stacks should use the same array for storing elements. 


Following functions must be supported by twoStacks.

push1(int x) –> pushes x to first stack 
push2(int x) –> pushes x to second stack
pop1() –> pops an element from first stack and return the popped element 
pop2() –> pops an element from second stack and return the popped element
Implementation of twoStack should be space efficient.


import java.util.*;
  
class twoStacks {
    int[] arr;
    int size;
    int top1, top2;
  
    // Constructor
    twoStacks(int n)
    {
        size = n;
        arr = new int[n];
        top1 = n / 2 + 1;
        top2 = n / 2;
    }
  
    // Method to push an element x to stack1
    void push1(int x)
    {
  
        // There is at least one empty
        // space for new element
        if (top1 > 0) {
            top1--;
            arr[top1] = x;
        }
        else {
            System.out.println("Stack Overflow"
                             + " By element : " + x);
            return;
        }
    }
  
    // Method to push an element
    // x to stack2
    void push2(int x)
    {
  
        // There is at least one empty
        // space for new element
        if (top2 < size - 1) {
            top2++;
            arr[top2] = x;
        }
        else {
            System.out.println("Stack Overflow"
                             + " By element : " + x);
            return;
        }
    }
  
    // Method to pop an element from first stack
    int pop1()
    {
        if (top1 <= size / 2) {
            int x = arr[top1];
            top1++;
            return x;
        }
        else {
            System.out.print("Stack UnderFlow");
            System.exit(1);
        }
        return 0;
    }
  
    // Method to pop an element
    // from second stack
    int pop2()
    {
        if (top2 >= size / 2 + 1) {
            int x = arr[top2];
            top2--;
            return x;
        }
        else {
            System.out.print("Stack UnderFlow");
            System.exit(1);
        }
        return 1;
    }
};
class GFG {
  
    /* Driver program to test twoStacks class */
    public static void main(String[] args)
    {
        twoStacks ts = new twoStacks(5);
        ts.push1(5);
        ts.push2(10);
        ts.push2(15);
        ts.push1(11);
        ts.push2(7);
        System.out.println("Popped element from stack1 is "
                         + ": " + ts.pop1());
        ts.push2(40);
        System.out.println("Popped element from stack2 is "
                         + ": " + ts.pop2());
    }
}
  



--------------------------------------------------

Time Complexity: 

Both Push operation: O(1)
Both Pop operation: O(1)
Auxiliary Space: O(N), Use of array to implement stack.

---------------------------------------------------------

Another Aprroach:-

// Java program to implement two stacks in a
// single array
  
import java.io.*;
  
class TwoStacks {
    int size;
    int top1, top2;
    int arr[];
  
    // Constructor
    TwoStacks(int n)
    {
        arr = new int[n];
        size = n;
        top1 = -1;
        top2 = size;
    }
  
    // Method to push an element x to stack1
    void push1(int x)
    {
        // There is at least one empty space for
        // new element
        if (top1 < top2 - 1) {
            top1++;
            arr[top1] = x;
        }
        else {
            System.out.println("Stack Overflow");
            System.exit(1);
        }
    }
  
    // Method to push an element x to stack2
    void push2(int x)
    {
        // There is at least one empty space for
        // new element
        if (top1 < top2 - 1) {
            top2--;
            arr[top2] = x;
        }
        else {
            System.out.println("Stack Overflow");
            System.exit(1);
        }
    }
  
    // Method to pop an element from first stack
    int pop1()
    {
        if (top1 >= 0) {
            int x = arr[top1];
            top1--;
            return x;
        }
        else {
            System.out.println("Stack Underflow");
            System.exit(1);
        }
        return 0;
    }
  
    // Method to pop an element from second stack
    int pop2()
    {
        if (top2 < size) {
            int x = arr[top2];
            top2++;
            return x;
        }
        else {
            System.out.println("Stack Underflow");
            System.exit(1);
        }
        return 0;
    }
  
    // Driver program to test twoStack class
    public static void main(String args[])
    {
        TwoStacks ts = new TwoStacks(5);
        ts.push1(5);
        ts.push2(10);
        ts.push2(15);
        ts.push1(11);
        ts.push2(7);
        System.out.println("Popped element from"
                           + " stack1 is " + ts.pop1());
        ts.push2(40);
        System.out.println("Popped element from"
                           + " stack2 is " + ts.pop2());
    }
}


============================================================================

Delete consecutive same words in a sequence:-
-------------------------------------------------------
Input : ab aa aa bcd ab
Output : 3
As aa, aa destroys each other so, 
ab bcd ab is the new sequence.

Input :  tom jerry jerry tom
Output : 0


1- Start traversing the sequence by storing it in vector.
  a) Check if the current string is equal to next string
     if yes, erase both from the vector.
  b) And check the same till last.
2- Return vector size.

-----------------------------
import java.util.Vector;
 
class Test
{
    // Method to find the size of manipulated sequence
    static int removeConsecutiveSame(Vector <String > v)
    {
        int n = v.size();
      
        // Start traversing the sequence
        for (int i=0; i<n-1; )
        {
            // Compare the current string with next one
            // Erase both if equal
            if (v.get(i).equals(v.get(i+1)))
            {
                // Erase function delete the element and
                // also shifts other element that's why
                // i is not updated
                v.remove(i);
                v.remove(i);
      
                // Update i, as to check from previous
                // element again
                if (i > 0)
                    i--;
      
                // Reduce sequence size
                n = n-2;
            }
      
            // Increment i, if not equal
            else
                i++;
        }
      
        // Return modified size
        return v.size();
    }
     
    // Driver method
    public static void main(String[] args)
    {
        Vector<String> v = new Vector<>();
 
        v.addElement("tom"); v.addElement("jerry");
        v.addElement("jerry");v.addElement("tom");
 
        System.out.println(removeConsecutiveSame(v));
    }
}

-----------------------------
Output
0
Time Complexity: O(n)
Auxiliary Space : O(1)
-----------------------------

static int removeConsecutiveSame(Vector <String> v)
    {
        Stack<String> st = new Stack<>();
      
        // Start traversing the sequence
        for (int i=0; i<v.size(); i++)
        {
            // Push the current string if the stack
            // is empty
            if (st.empty())
                st.push(v.get(i));
            else
            {
                String str = st.peek();
      
                // compare the current string with stack top
                // if equal, pop the top
                if (str.equals(v.get(i)))   
                    st.pop();
      
                // Otherwise push the current string
                else
                    st.push(v.get(i));
            }
        }
      
        // Return stack size
        return st.size();
    }


Time Complexity: O(N), where N is the size of the given sequence.
Auxiliary Space: O(N), since we are using a stack to store the elements of the sequence.




